// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Printf = require("rescript/lib/js/printf.js");

function $$return(x) {
  return x;
}

function bind(x, f) {
  return Curry._1(f, x);
}

function map(x, f) {
  return Curry._1(f, x);
}

function both(x, y) {
  return [
          x,
          y
        ];
}

var Open_on_rhs = {
  $$return: $$return
};

var Let_syntax = {
  $$return: $$return,
  bind: bind,
  map: map,
  both: both,
  Open_on_rhs: Open_on_rhs
};

var Let_syntax$1 = {
  $$return: $$return,
  Let_syntax: Let_syntax
};

var X = {
  Let_syntax: Let_syntax$1
};

function _mf(a) {
  return a + 1 | 0;
}

function _mf$p(a, b, c) {
  var param_1 = [
    b,
    c
  ];
  var match = param_1;
  var match$1 = match[1];
  return (a + match[0] | 0) + Math.imul(match$1[0], match$1[1]) | 0;
}

function _mg(a) {
  return a + 1 | 0;
}

function _mg$p(a, b, c) {
  var param_1 = [
    b,
    c
  ];
  var match = param_1;
  var match$1 = match[1];
  return (a + match[0] | 0) + Math.imul(match$1[0], match$1[1]) | 0;
}

function _mh(a) {
  return a === 0;
}

function _mi(a) {
  return a === 0;
}

function _mif(a) {
  if (a) {
    return true;
  } else {
    return false;
  }
}

function _mif$p(a) {
  if (a) {
    return true;
  } else {
    return false;
  }
}

var Monad_example = {
  X: X,
  _mf: _mf,
  _mf$p: _mf$p,
  _mg: _mg,
  _mg$p: _mg$p,
  _mh: _mh,
  _mi: _mi,
  _mif: _mif,
  _mif$p: _mif$p
};

function map2(a, b, f) {
  return Curry._2(f, a, b);
}

function map3(a, b, c, f) {
  return map2([
              a,
              b
            ], c, (function (param, c) {
                return Curry._3(f, param[0], param[1], c);
              }));
}

function map4(a, b, c, d, f) {
  return map2([
              a,
              b
            ], [
              c,
              d
            ], (function (param, param$1) {
                return Curry._4(f, param[0], param[1], param$1[0], param$1[1]);
              }));
}

var Let_syntax$2 = {
  $$return: $$return,
  bind: bind,
  map: map,
  both: both,
  Open_on_rhs: Open_on_rhs,
  map2: map2,
  map3: map3,
  map4: map4
};

var Let_syntax$3 = {
  $$return: $$return,
  Let_syntax: Let_syntax$2
};

var _x = map4(1, "hi", 2.34, true, (function (a, b, c, d) {
        return Curry._4(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* ' ' */32,
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* Char_literal */12,
                                _0: /* ' ' */32,
                                _1: {
                                  TAG: /* Float */8,
                                  _0: /* Float_f */0,
                                  _1: /* No_padding */0,
                                  _2: /* No_precision */0,
                                  _3: {
                                    TAG: /* Char_literal */12,
                                    _0: /* ' ' */32,
                                    _1: {
                                      TAG: /* Bool */9,
                                      _0: /* No_padding */0,
                                      _1: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        _1: "%d %s %f %b"
                      }), a, b, c, d);
      }));

var Example_with_mapn = {
  Let_syntax: Let_syntax$3,
  _x: _x
};

exports.Monad_example = Monad_example;
exports.Example_with_mapn = Example_with_mapn;
/* _x Not a pure module */
